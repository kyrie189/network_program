#include <stdio.h>
#include <pcap.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <net/ethernet.h>
#include <netinet/if_ether.h>
#include <time.h>
#include <string.h>
#define IP_HL(ip)   (((ip)->ver_ihl) & 0x0f)
#define ETHER_ADDR_LEN 6
#define MAC_ADDRSTRLEN 2*6+5+1

typedef struct __attribute__((__packed__)) EtherHeader {
    const struct ether_addr destAddr[6];
    const struct ether_addr sourceAddr[6];
    uint8_t protocol;
}EtherHeader;

/* UDP header */
struct sniff_udp
{
  uint16_t sport;  /* source port */
  uint16_t dport;  /* destination port */
  uint16_t udp_length;
  uint16_t udp_sum;  /* checksum */
};
 
/* TCP header */
typedef u_int tcp_seq;
struct sniff_tcp
{
  u_short th_sport;  /* source port */
  u_short th_dport;  /* destination port */
  tcp_seq th_seq;  /* sequence number */
  tcp_seq th_ack;  /* acknowledgement number */
  u_char th_offx2;  /* data offset, rsvd */
#define TH_OFF(th)      (((th)->th_offx2 & 0xf0) >> 4)
  u_char th_flags;
#define TH_FIN  0x01
#define TH_SYN  0x02
#define TH_RST  0x04
#define TH_PUSH 0x08
#define TH_ACK  0x10
#define TH_URG  0x20
#define TH_ECE  0x40
#define TH_CWR  0x80
#define TH_FLAGS        (TH_FIN|TH_SYN|TH_RST|TH_ACK|TH_URG|TH_ECE|TH_CWR)
  u_short th_win;  /* window */
  u_short th_sum;  /* checksum */
  u_short th_urp;  /* urgent pointer */
};
 
int cnt=0;
typedef struct ip_address
{
 u_char byte1;
 u_char byte2;
 u_char byte3;
 u_char byte4;
}ip_address;

typedef struct ip_header
{
 u_char ver_ihl;  /* Version (4 bits) + Internet header length (4 bits)*/
 u_char tos;      /* Type of service */
 u_short tlen;    /* Total length */
 u_short identification; /* Identification */
 u_short flags_fo;       /* Flags (3 bits) + Fragment offset (13 bits)*/
 u_char ttl;      /* Time to live */
 u_char proto;    /* Protocol */
 u_short crc;     /* Header checksum */
 ip_address saddr;/* Source address */
 ip_address daddr;/* Destination address */
 u_int op_pad;    /* Option + Padding */
}ip_header;